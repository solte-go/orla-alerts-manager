version: "3.7"
services:
  rabbitmq:
    image: solte/rabbitmq:3.11
    container_name: orla-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - 5672
      - 15672
    networks:
      - dev-network
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBIT_USER
      - RABBITMQ_DEFAULT_PASS=$RABBIT_PASS

  prometheus:
    image: "prom/prometheus"
    container_name: prometheus
    ports:
      - "9090:9090"
    expose:
      - 9090
    volumes:
      - ./prometheus_cfg.yaml:/etc/prometheus/cfg.yaml
    command:
      - "--storage.tsdb.retention.time=30d"
      - "--config.file=/etc/prometheus/cfg.yaml"
    networks:
      - dev-network

  mongodb:
    container_name: mongodb
    image: mongo
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_USERNAME
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASS
    ports:
      - "27017:27017"
    expose:
      - 27017
    volumes:
      - mongodb-volume:/data/db
    networks:
      - dev-network

  zookeeper:
    image: bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - dev-network

  kafka:
    image: bitnami/kafka:3
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://v1:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - dev-network

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
  #   container_name: elasticsearch
  #   environment:
  #     - xpack.security.enabled=false
  #     - discovery.type=single-node
  #     - cluster.routing.allocation.disk.watermark.flood_stage=100mb
  #     - cluster.routing.allocation.disk.watermark.high=1gb
  #     - cluster.routing.allocation.disk.watermark.low=2gb
  #     - ES_JAVA_OPTS=-Xms1G -Xmx1G
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   expose:
  #     - 9200
  #     - 9300
  #   networks:
  #     - dev-network
  #   volumes:
  #     - elasticsearch-volume:/usr/share/elasticsearch/data

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.16.3
  #   container_name: kibana
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  #   expose:
  #     - 5601
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - dev-network

volumes:
  elasticsearch-volume:
    driver: local
  mongodb-volume:
    driver: local
  rabbitmq-volume:
    driver: local

networks:
  dev-network:
    driver: bridge
